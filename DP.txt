Dynamic Programming(DP)

🔎 문제에 대한 정답이 될 가능성이 있는 모든 해결책을 
"체계적" 이 "효율적"으로 탐색하는 풀이법


1️⃣ 크고 복잡한 문제를 작은 문제들로 나눈다. (subproblem - 하위문제)
2️⃣ 하위 문제의 답을 계산한다 
   🟥 중복 계산해야 하는 하위 문제가 있음 
   (overlapping subproblem - 중복 하위 문제)
   🟥 한 번 계산한 결과는 메모리에 저장하여 재계산 하지 않도록 함 
   속도 향상(memoization, db table)
3️⃣ 하위 문제에 대한 답을 통해 원래 문제에 대한 답을 계산한다 
(optimal substructure - 최적 부분 구조)
   🟩 최적 부분 구조란? 
   하위 부분 문제에서 구한 최적의 답이 합쳐진 큰 문제의 최적의 답을 구할 수 있는 구조




📣 피보나치 수열
    1 1 2 3 5 8 13 21 34 55 ...
    
    fibo = (n-1) + (n-2)

    접근 방법 => 완전탐색(재귀)
    1️⃣ 크고 복잡한 문제를 하위 문제로 나눈다 
    2️⃣ 하위 문제의 답을 계산한다 
    3️⃣ 하위 문제에 대한 답을 통해 원래 문제에 대한 답을 계산한다 


        🟣 재귀로 구현된 완전 탐색 풀이 
        
            def fibo(n):

                if n == 1 or n == 2 : 
                    return 1 

                return fibo(n-1) + fibo(n-2)
            
                시간복잡도 : O(2^n)
            
            💬 위 코드는 중복된 문제들을 계속 다시 계산하는 문제가 발생하여 비효율적임 


        🟣 DP를 활용한 풀이( Top-down 방식 ) - memoization

            memo = {}

            def fibo(n):

                if n == 1 or n == 2 : 
                    return 1 

                if n not in momo:
                    memo[n] = fibo(n-1) + fibo(n-2)
                
                return memo[n]

                시간 복잡도 : O(n)
                💬 위 코드는 메모리를 사용함으로써 시간복잡도를 현저히 낮출 수 있음

        🟣 DP를 활용한 풀이( Bottom-up 방식 ) -tablelation

            memo = {1:1,2:1}      # bace case 즉 초기값 설정해주기

            def fibo(n):
                
                for i in range(3, n+1):
                    memo[i] = memo[i-1] + memo[i-2]

                return memo[n]



        🟣 Climbing stairs(leetcode. 70)
            계단을 올라가고 있다. 
            이 계단의 꼭대기에 도착하려면 
            n개의 steps만큼 올라가야 한다. 
            한 번 올라갈 때마다 1 step 또는 2 steps 올라갈 수 있다. 
            꼭대기에 도달하는 방법의 개수는 총 몇가지일까? 

            ⛔️ 제약 조건
               1 <= n <= 45

            🔖 input : n = 2
            🔖 output : 2
                1. 1step + 1step
                2. 2steps

            🔖 input : n = 3
            🔖 output : 3
                1. 1step + 1step + 1step
                2. 1step + 2steps
                3. 2steps + 1step





🔈 recurrence relation(점화식)이란

    💬 어떤 함수를 정의하기 위해 쓰이는 식에서 그 함수가 다시 나오는, 즉 재귀적인 식
    ex. 등차수열, 등비수열, 피보나치수열 




📕 DP 요약

    : 다이나믹 프로그래밍이란 크고 복잡한 문제를 작게 나누고
    중복되는 문제라면 한 번 계산한 결과값을 저장해놓고 재사용함으로써
    문제를 효율적으로 해결하는 알고리즘임

    1️⃣ overlapping
        - Problem을 작은 subproblem으로 분해
        - subproblem의 계산값을 재사용 ➡️ 시간복잡도를 낮춤

    2️⃣ optimalal substructure
        - subproblem의 최적 해법으로
        원래 문제의 최적 해법을 구할 수 있음 


    📚 문제 적용
       (1) Optimal value(최대 최소), 방법의 개수 등을 구할 때 
            - ~의 최소 비용은? 
            - ~의 최대 이익은?
            - ~를 하는 방법의 개수는?
            - 특정 지점에 도달할 수 있는지? 
        (2) 미래의 계산이 앞선 계산 결과에 영향을 받을 때 



    📁 Top down(memoization)

        - 재귀 사용 ➡️ 구현 시간이 빠름
        - 재귀 풀이에서 중복되는 계산 값을 저장하여(momoize)
           동일한 함수 호출시에 재활용 함
        - hashtable 또는 list에 계산 결과를 저장함



    📁 Bottom up(tabulation)

        - 반복문 사용 ➡️ 실행 시간이 빠름
        - 더 작은 subproblem에 대한 계산 결과를
        DP table에 저장하여 더 큰 문제의 계산에 활용
        - hashtable 또는 list에 계산 결과를 저장함



    문제 풀이 
    : 특정한 문제를 완전 탐색 알고리즘으로 접근해보고
    시간 복잡도가 너무 높다면 DP를 적용할 수 있는지 생각해보자
    subproblem의 중복 여부를 판단하는 것이 첫 번째 순서임


    구현 방법
    : (1) 일단 재귀함수로 비효율적인 완전탐색 코드를 작성함
    (2) 중복되는 subproblem의 계산 결과를 저장(memoize)함
    (3) 탑다운 ➡️ 바텀업으로 코드 전환을 고려함


    코테 출제 
    : DP는 문제에 적용하기에 어려운 개념이라서 
    코딩테스트에서는 기본에 충실한 문제 위주로 출제할 수 밖에 없음 

    

