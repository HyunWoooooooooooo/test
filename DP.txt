Dynamic Programming(DP)

🔎 문제에 대한 정답이 될 가능성이 있는 모든 해결책을 
"체계적" 이 "효율적"으로 탐색하는 풀이법


1️⃣ 크고 복잡한 문제를 작은 문제들로 나눈다. (subproblem - 하위문제)
2️⃣ 하위 문제의 답을 계산한다 
   🟩 중복 계산해야 하는 하위 문제가 있음 
   (overlapping subproblem - 중복 하위 문제)
   🟩 한 번 계산한 결과는 메모리에 저장하여 재계산 하지 않도록 함 
   속도 향상(memoization, db table)
3️⃣ 하위 문제에 대한 답을 통해 원래 문제에 대한 답을 계산한다 
(optimal substructure - 최적 부분 구조)
   🟩 최적 부분 구조란? 
   하위 부분 문제에서 구한 최적의 답이 합쳐진 큰 문제의 최적의 답을 구할 수 있는 구조




📣 피보나치 수열
    1 1 2 3 5 8 13 21 34 55 ...
    
    fibo = (n-1) + (n-2)

    접근 방법 => 완전탐색(재귀)
    1️⃣ 크고 복잡한 문제를 하위 문제로 나눈다 
    2️⃣ 하위 문제의 답을 계산한다 
    3️⃣ 하위 문제에 대한 답을 통해 원래 문제에 대한 답을 계산한다 




🔈 recurrence relation(점화식)이란

    💬 어떤 함수를 정의하기 위해 쓰이는 식에서 그 함수가 다시 나오는, 즉 재귀적인 식
    ex. 등차수열, 등비수열, 피보나치수열 

    